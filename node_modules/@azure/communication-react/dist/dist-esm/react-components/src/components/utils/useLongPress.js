// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { useRef, useState } from 'react';
/**
 * @private
 */
export default function useLongPress(onClick, onLongPress, isMobile) {
    const timerRef = useRef();
    const [isLongPress, setIsLongPress] = useState(false);
    const [action, setAction] = useState(false);
    function startPressTimer() {
        setIsLongPress(false);
        timerRef.current = setTimeout(() => {
            setIsLongPress(true);
        }, 500);
    }
    function handleOnClick() {
        // when it's mobile use ontouchstart and ontouchend to fire onclick and onlongpress event
        if (isMobile) {
            return;
        }
        onClick();
        if (isLongPress) {
            onLongPress();
            return;
        }
    }
    function handleOnKeyDown() {
        if (action) {
            setAction(false);
            startPressTimer();
        }
    }
    function handleOnKeyUp() {
        setAction(true);
        timerRef.current && clearTimeout(timerRef.current);
    }
    function handleOnMouseDown() {
        startPressTimer();
    }
    function handleOnMouseUp() {
        timerRef.current && clearTimeout(timerRef.current);
    }
    function handleOnTouchStart() {
        startPressTimer();
    }
    function handleOnTouchEnd() {
        if (isMobile) {
            isLongPress ? onLongPress() : onClick();
        }
        timerRef.current && clearTimeout(timerRef.current);
    }
    return {
        handlers: {
            onClick: handleOnClick,
            onMouseDown: handleOnMouseDown,
            onMouseUp: handleOnMouseUp,
            onTouchStart: handleOnTouchStart,
            onTouchEnd: handleOnTouchEnd,
            onKeyDown: handleOnKeyDown,
            onKeyUp: handleOnKeyUp
        }
    };
}
//# sourceMappingURL=useLongPress.js.map